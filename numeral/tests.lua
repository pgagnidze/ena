local module = {}
local lu = require 'luaunit'
local numeral = require('common').testGrammar(require 'numeral')

function module:testNaturalNumbers()
    lu.assertEquals(numeral:match('0'), 0)
    lu.assertEquals(numeral:match('100'), 100)
    lu.assertEquals(numeral:match('1 000'), 1000)
    lu.assertEquals(numeral:match('1 000'), 1000)
    lu.assertEquals(numeral:match('1 2 3 4 5 6 7 8 9 0'), 1234567890)
end

function module:testRationalNumbers()
    lu.assertEquals(numeral:match('0.'), 0)
    lu.assertEquals(numeral:match('0.0'), 0)
    lu.assertEquals(numeral:match('0.1'), 0.1)
    lu.assertEquals(numeral:match('0.01'), 0.01)
    lu.assertEquals(numeral:match('.1'), 0.1)
    lu.assertEquals(numeral:match('.01'), 0.01)
    lu.assertEquals(numeral:match('1.'), 1)
    lu.assertEquals(numeral:match('10.'), 10)
end

function module:testExponents()
    lu.assertEquals(numeral:match('1e0'), 1)
    lu.assertEquals(numeral:match('1e1'), 10)
    lu.assertEquals(numeral:match('1e2'), 100)
    lu.assertEquals(numeral:match('1e+0'), 1)
    lu.assertEquals(numeral:match('1e+1'), 10)
    lu.assertEquals(numeral:match('1e+2'), 100)
    lu.assertEquals(numeral:match('1e-1'), 0.1)
    lu.assertEquals(numeral:match('1e-2'), 0.01)
    lu.assertEquals(numeral:match('1e-3'), 0.001)
end

function module:testRationalExponents()
    lu.assertEquals(numeral:match('1.01e0'), 1.01)
    lu.assertEquals(numeral:match('1.02e1'), 10.2)
    lu.assertEquals(numeral:match('1.03e2'), 103)
    lu.assertEquals(numeral:match('1.04e+0'), 1.04)
    lu.assertEquals(numeral:match('1.05e+1'), 10.5)
    lu.assertEquals(numeral:match('1.06e+2'), 106)
    lu.assertEquals(numeral:match('1.07e-1'), 0.107)
    lu.assertEquals(numeral:match('1.08e-2'), 0.0108)
    lu.assertEquals(numeral:match('1.09e-3'), 0.00109)
end

function module:testBaseNumber()
    lu.assertEquals(numeral:match('01 0'), 0)
    lu.assertEquals(numeral:match('01 1'), 1)
    lu.assertEquals(numeral:match('01 10'), 2)
    lu.assertEquals(numeral:match('01 11'), 3)
    lu.assertEquals(numeral:match('01 100'), 4)
    lu.assertEquals(numeral:match('01 101'), 5)
    lu.assertEquals(numeral:match('01 110'), 6)
    lu.assertEquals(numeral:match('01 111'), 7)
    lu.assertEquals(numeral:match('01 1000'), 8)
    lu.assertEquals(numeral:match('01 1001'), 9)
    lu.assertEquals(numeral:match('01 1010'), 10)
    lu.assertEquals(numeral:match('01 1011'), 11)
    lu.assertEquals(numeral:match('01 1100'), 12)
    lu.assertEquals(numeral:match('01 1101'), 13)
    lu.assertEquals(numeral:match('01 1110'), 14)
    lu.assertEquals(numeral:match('01 1111'), 15)
    lu.assertEquals(numeral:match('01 10000'), 16)
    lu.assertEquals(numeral:match('01 10001'), 17)
    lu.assertEquals(numeral:match('01 10010'), 18)
    lu.assertEquals(numeral:match('01 10011'), 19)
    lu.assertEquals(numeral:match('01 10100'), 20)
    lu.assertEquals(numeral:match('01 10101'), 21)
    lu.assertEquals(numeral:match('01 10110'), 22)
    lu.assertEquals(numeral:match('01 10111'), 23)
    lu.assertEquals(numeral:match('01 11000'), 24)
    lu.assertEquals(numeral:match('01 11001'), 25)
    lu.assertEquals(numeral:match('01 11010'), 26)
    lu.assertEquals(numeral:match('01 11011'), 27)
    lu.assertEquals(numeral:match('01 11100'), 28)
    lu.assertEquals(numeral:match('01 11101'), 29)
    lu.assertEquals(numeral:match('01 11110'), 30)
end

function module:testBaseTwelveNumbers()
    lu.assertEquals(numeral:match('0B 0'), 0)
    lu.assertEquals(numeral:match('0B 1'), 1)
    lu.assertEquals(numeral:match('0B 2'), 2)
    lu.assertEquals(numeral:match('0B 3'), 3)
    lu.assertEquals(numeral:match('0B 4'), 4)
    lu.assertEquals(numeral:match('0B 5'), 5)
    lu.assertEquals(numeral:match('0B 6'), 6)
    lu.assertEquals(numeral:match('0B 7'), 7)
    lu.assertEquals(numeral:match('0B 8'), 8)
    lu.assertEquals(numeral:match('0B 9'), 9)
    lu.assertEquals(numeral:match('0B A'), 10)
    lu.assertEquals(numeral:match('0B B'), 11)
    lu.assertEquals(numeral:match('0B 10'), 12)
    lu.assertEquals(numeral:match('0B 11'), 13)
    lu.assertEquals(numeral:match('0B 12'), 14)
    lu.assertEquals(numeral:match('0B 13'), 15)
    lu.assertEquals(numeral:match('0B 14'), 16)
    lu.assertEquals(numeral:match('0B 15'), 17)
    lu.assertEquals(numeral:match('0B 16'), 18)
    lu.assertEquals(numeral:match('0B 17'), 19)
    lu.assertEquals(numeral:match('0B 18'), 20)
    lu.assertEquals(numeral:match('0B 19'), 21)
    lu.assertEquals(numeral:match('0B 1A'), 22)
    lu.assertEquals(numeral:match('0B 1B'), 23)
    lu.assertEquals(numeral:match('0B 20'), 24)
end

function module:testUnaryNumbers()
    lu.assertEquals(numeral:match('00 1'), 1)
    lu.assertEquals(numeral:match('00 11'), 2)
    lu.assertEquals(numeral:match('00 111'), 3)
    lu.assertEquals(numeral:match('00 1111'), 4)
    lu.assertEquals(numeral:match('00 11111'), 5)
    lu.assertEquals(numeral:match('00 11111 1'), 6)
    lu.assertEquals(numeral:match('00 11111 11'), 7)
    lu.assertEquals(numeral:match('00 11111 111'), 8)
end

return module